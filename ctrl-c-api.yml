openapi: 3.0.3
info:
  title: ctrl-c API
  description: API contract for ctrl-c shortcut collections
  version: '1.0'
servers:
  - url: 'http://localhost:8080'
    description: localhost
tags:
  - name: Collections
    description: Shortcut collections API
  - name: Users
    description: API related to user profiles and preferences

paths:
  '/api/v1/collections':
    get:
      summary: Search collections by tags or by author
      tags:
        - Collections
      description: ''
      operationId: get-collections
      parameters:
        - name: tags
          in: query
          description: search terms
          schema:
            type: string
        - name: author
          in: query
          description: userId
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  recommendations:
                    $ref: '#/components/schemas/Shortcut'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShortcutCollection'
              examples:
                Example 1:
                  value:
                    recommendations:
                      id: '123'
                      action: Top 5 shortcuts across collections
                      likes: null
                      tags: null
                      isMigration: null
                      isBlock: true
                      bindings: null
                      shortcuts:
                        - id: '1234'
                          action: Reopen most recently closed tab
                          likes: 678
                          tags:
                            - chrome
                            - mac
                            - web
                          isMigration: false
                          isBlock: false
                          bindings:
                            - binding:
                                - cmd
                                - shift
                                - T
                              platform: mac
                              software: chrome
                          shortcuts: null
                    results:
                      - id: '123456'
                        name: Chrome win -> mac migration!
                        tags:
                          - mac
                          - win/linux
                          - chrome
                        software:
                          - chrome
                        platform:
                          - mac
                          - win/linux
                        likes: 234
                        forks: 334
                        author:
                          id: string
                          name: string
                          avatarUrl: string
                        isMigration: true
                        isPublic: true
                        createdOn: string
                        shortcuts:
                          - id: '1234567'
                            action: Open new tab
                            isMigration: true
                            isBlock: false
                            likes: 324
                            tags:
                              - chrome
                              - mac
                              - win/linux
                              - migration
                            bindings:
                              - binding:
                                  - cmd
                                  - T
                                platform: mac
                                software: chrome
                              - binding:
                                  - ctrl
                                  - T
                                platform: win/linux
                                software: chrome
                            shortcuts: null
      servers:
        - url: 'http://localhost:8080/api/v1'
          description: localhost
    post:
      summary: Create new collection
      tags:
        - Collections
      operationId: post-collections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShortcutCollection'
      responses:
        '201':
          description: Created
      servers:
        - url: 'http://localhost:8080/api/v1'
          description: localhost
  '/api/v1/collections/{id}':
    get:
      summary: GET collection by id
      tags:
        - Collections
      operationId: get-collections-id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortcutCollection'
      servers:
        - url: 'http://localhost:8080/api/v1'
          description: localhost
    put:
      summary: Edit collection layout
      tags:
        - Collections
      operationId: put-collections-id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShortcutCollection'
      responses:
        '200':
          description: OK
      servers:
        - url: 'http://localhost:8080/api/v1'
          description: localhost
    patch:
      summary: Update collection elements
      tags:
        - Collections
      description: Use this when the layout is not changed
      operationId: patch-collections-id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                likes:
                  type: number
                forks:
                  type: number
                isPublic:
                  type: boolean
      responses:
        '200':
          description: OK
      servers:
        - url: 'http://localhost:8080/api/v1'
          description: localhost
    delete:
      summary: Remove collection
      tags:
        - Collections
      operationId: delete-collections-id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
      servers:
        - url: 'http://localhost:8080/api/v1'
          description: localhost
  '/api/v1/collections/{id}/pdf':
    get:
      summary: GET collection as PDF
      tags:
        - Collections
      operationId: get-collections-pdf
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/pdf:
              schema:
                type: object
      servers:
        - url: 'http://localhost:8080/api/v1'
          description: localhost
  '/api/v1/shortcuts':
    get:
      summary: Search shortcuts by tags
      tags:
        - Collections
      description: ''
      operationId: get-shortcuts
      parameters:
        - name: tags
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shortcut'
      servers:
        - url: 'http://localhost:8080/api/v1'
          description: localhost
    post:
      summary: Create new shortcut
      tags:
        - Collections
      description: ''
      operationId: post-shortcuts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shortcut'
      responses:
        '201':
          description: Created
      servers:
        - url: 'http://localhost:8080/api/v1'
          description: localhost
  '/api/v1/shortcuts/{id}':
    get:
      summary: GET shortcut by id
      tags:
        - Collections
      description: ''
      operationId: get-shortcuts-id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shortcut'
      servers:
        - url: 'http://localhost:8080/api/v1'
          description: localhost
    put:
      summary: Edit shortcut
      tags:
        - Collections
      operationId: put-shortcuts-id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shortcut'
      responses:
        '200':
          description: OK
      servers:
        - url: 'http://localhost:8080/api/v1'
          description: localhost
    patch:
      summary: Update shortcut likes
      tags:
        - Collections
      operationId: patch-shortcuts-id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                likes:
                  type: number
      responses:
        '200':
          description: OK
      servers:
        - url: 'http://localhost:8080/api/v1'
          description: localhost

  '/api/v1/users/profile':
    post:
      tags:
        - Users
      summary: Create new user profile
      operationId: createUserProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Client Error
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/ValidationErrorResponse'
              example:
                value:
                  {
                    "type": "VALIDATION_ERROR",
                    "title": "The provided input is invalid",
                    "instance": "/api/v1/users/profile",
                    "details": [
                      {
                        "name": "name",
                        "reason": "is missing"
                      }
                    ]
                  }
        '500':
          description: Internal Service Error
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "INTERNAL_SERVER_ERROR",
                    "title": "Unexpected server error",
                    "instance": "/api/v1/users/profile"
                  }
        '503':
          description: Service Unavailable
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "SERVICE_UNAVAILABLE",
                    "title": "ctrl-c is unavailable",
                    "instance": "/api/v1/users/profile",
                    "details": [
                      {
                        "reason": "Database unavailable"
                      }
                    ]
                  }

  '/api/v1/users/{id}/profile':
    get:
      tags:
        - Users
      summary: Fetch user profile
      operationId: fetchUserProfile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "NOT_FOUND",
                    "title": "User profile not found",
                    "instance": "/api/v1/users/{id}/profile"
                  }
        '500':
          description: Internal Service Error
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "INTERNAL_SERVER_ERROR",
                    "title": "Unexpected server error",
                    "instance": "/api/v1/users/{id}/profile"
                  }
        '503':
          description: Service Unavailable
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "SERVICE_UNAVAILABLE",
                    "title": "ctrl-c is unavailable",
                    "instance": "/api/v1/users/{id}/profile",
                    "details": [
                      {
                        "reason": "Database unavailable"
                      }
                    ]
                  }
    delete:
      tags:
        - Users
      summary: Delete user profile
      operationId: deleteUserProfile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          style: simple
      responses:
        '204':
          description: Success
        '404':
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "NOT_FOUND",
                    "title": "User profile not found",
                    "instance": "/api/v1/users/{id}/profile"
                  }
        '500':
          description: Internal Service Error
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "INTERNAL_SERVER_ERROR",
                    "title": "Unexpected server error",
                    "instance": "/api/v1/users/{id}/profile"
                  }
        '503':
          description: Service Unavailable
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "SERVICE_UNAVAILABLE",
                    "title": "ctrl-c is unavailable",
                    "instance": "/api/v1/users/{id}/profile",
                    "details": [
                      {
                        "reason": "Database unavailable"
                      }
                    ]
                  }

  '/api/v1/users/{id}/collections':
    get:
      tags:
        - Users
      summary: Fetch user collections
      operationId: fetchUserCollections
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCollectionsResponse'
        '404':
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "NOT_FOUND",
                    "title": "User profile not found",
                    "instance": "/api/v1/users/{id}/collections"
                  }
        '500':
          description: Internal Service Error
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "INTERNAL_SERVER_ERROR",
                    "title": "Unexpected server error",
                    "instance": "/api/v1/users/{id}/collections"
                  }
        '503':
          description: Service Unavailable
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "SERVICE_UNAVAILABLE",
                    "title": "ctrl-c is unavailable",
                    "instance": "/api/v1/users/{id}/collections",
                    "details": [
                      {
                        "reason": "Database unavailable"
                      }
                    ]
                  }
    delete:
      tags:
        - Users
      summary: Delete user collections
      operationId: deleteUserCollections
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          style: simple
      responses:
        '204':
          description: Success
        '404':
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "NOT_FOUND",
                    "title": "User profile not found",
                    "instance": "/api/v1/users/{id}/collections"
                  }
        '500':
          description: Internal Service Error
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "INTERNAL_SERVER_ERROR",
                    "title": "Unexpected server error",
                    "instance": "/api/v1/users/{id}/collections"
                  }
        '503':
          description: Service Unavailable
          content:
            application/problem+json:
              schema:
                $ref: 'error-schemas.yml#/BaseErrorResponse'
              example:
                value:
                  {
                    "type": "SERVICE_UNAVAILABLE",
                    "title": "ctrl-c is unavailable",
                    "instance": "/api/v1/users/{id}/collections",
                    "details": [
                      {
                        "reason": "Database unavailable"
                      }
                    ]
                  }

components:
  schemas:

    Shortcut:
      title: Shortcut
      description: Shortcut representation that holds key bindings.
      type: object
      required:
        - id
        - action
        - bindings
      properties:
        id:
          type: string
          description: Shortcut id
          format: uuid
          example: '550e8400-e29b-41d4-a716-44665544001'
        action:
          type: string
          description: Shortcut action
          example: 'Open new tab'
        likes:
          type: integer
          description: Number of likes this shortcut received
          example: 255
        tags:
          type: array
          description: List of tags used for searching (comprised of key bindings keyboard and software)
          items:
            type: string
          example: [ '#chrome', '#mac' ]
        isMigration:
          type: boolean
          description: Indicates whether shortcut contains multiple keyboard/software bindings
          example: false
        bindings:
          type: array
          items:
            $ref: '#/components/schemas/KeyBinding'
          minItems: 1

    KeyBinding:
      title: KeyBinding
      description: Shortcut key binding representation
      type: object
      required:
        - keys
        - keyboard
        - software
      properties:
        keys:
          type: array
          description: List of keys
          items:
            type: string
          example: [ 'cmd', 'T' ]
          minItems: 1
        keyboard:
          type: string
          description: Keyboard type
          enum:
            - mac
            - win/linux
          example: 'mac'
        software:
          type: string
          description: Name of software
          example: 'chrome'

    ShortcutBlock:
      title: ShortcutBlock
      description: Block of shortcuts
      type: object
      required:
        - id
        - shortcuts
      properties:
        id:
          type: string
          description: Shortcut block id
          format: uuid
          example: '550e8400-e29b-41d4-a716-44665544000'
        title:
          type: string
          description: Shortcut block title
          example: 'Working with tabs'
        shortcuts:
          type: array
          description: List of shortcuts this block groups together
          minItems: 1
          items:
            oneOf:
              - $ref: '#/components/schemas/Shortcut'
              - $ref: '#/components/schemas/ShortcutBlock'

    ShortcutCollection:
      title: ShortcutCollection
      description: Collection of shortcuts
      type: object
      required:
        - id
        - name
        - author
      properties:
        id:
          type: string
          description: Collection id
          format: uuid
          example: '550e8400-e29b-41d4-a716-44665544003'
        name:
          type: string
          description: Collection name
          example: 'IntelliJ IDEA top 20 shortcuts'
        tags:
          type: array
          description: List of tags used for searching (comprised of shortcuts tags)
          items:
            type: string
          example: [ '#intellij_idea', '#mac' ]
        keyboard:
          type: string
          description: Keyboard type
          enum:
            - mac
            - win/linux
          example: 'mac'
        software:
          type: string
          description: Name of software
          example: 'IntelliJ IDEA'
        likes:
          type: integer
          description: Number of likes this collection received
          example: 1231
        forks:
          type: number
          description: Number of times this collection was forked
          example: 251
        author:
          type: string
          description: Author's profile id
          format: uuid
          example: '550e8400-e29b-41d4-a716-44665544004'
        isMigration:
          type: boolean
          description: Indicates whether collection contains multiple keyboard/software bindings
          example: false
        isPublic:
          type: boolean
          description: Indicates whether user made this collection public of kept it private
        createdOn:
          type: string
          description: Creation timestamp
          format: date-time
        shortcuts:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Shortcut'
              - $ref: '#/components/schemas/ShortcutBlock'

    UserProfile:
      title: UserProfile
      description: Registered user representation
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          description: User profile id
          format: uuid
          example: '550e8400-e29b-41d4-a716-44665544002'
        name:
          type: string
          description: User display name
          minLength: 1
          example: 'John Doe'
        email:
          type: string
          description: User email address
          format: email
          pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
        avatarUrl:
          type: string
          description: Avatar location to be loaded for displaying
          format: uri

    UserCollectionsResponse:
      title: UserCollectionsResponse
      description: User profile response
      type: object
      properties:
        id:
          type: string
          description: User profile id
          format: uuid
          example: '550e8400-e29b-41d4-a716-44665544002'
        bookmarked:
          type: array
          description: List of collection ids user bookmarked
          items:
            type: string
            format: uuid
        likes:
          type: object
          description: List of collections and shortcuts user liked
          properties:
            collections:
              type: array
              description: List of collection ids the user liked
              items:
                type: string
                format: uuid
            shortcuts:
              type: array
              description: List of shortcut ids the user liked
              items:
                type: string
                format: uuid
